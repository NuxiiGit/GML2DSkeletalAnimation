<!DOCTYPE html>
<html>
	<head>
		<title>2DSkeletalAnimation Script Documentation</title>

		<meta charset="utf-8"/>
		
		<script type="text/javascript">
			// update the tag
            function js_find_tag(){
				var js_searchBar = document.getElementById("js_search");
				location.href = "#"+js_searchBar.value;
				js_searchBar.value = ""; // reset value
			}
			// create event listener for the search bar
			window.addEventListener("load",
				function(){
					document.getElementById("js_search").addEventListener("keypress",
						function(e){
							if(e.keyCode==13){
								js_find_tag();
							}
						}
					);
					// create custom tags
					document.createElement("documentation");
				}
			);
        </script>
		<style>
			body{
				background-color: #281927;
				font-family: Arial, serif;
				font-size: 14px;
				color: #ddd0dc;
			}
			p{
				margin-left: 5px;
			}
			a{
				font-weight: bold;
				text-decoration-line: none;
				color: #ff43a4;
			}
			/*(wip) GMS2's header banner*/
			.title::before {
				background-color: #1c111b;
				position:absolute;
				content: " ";
				left:0;
				right:0;
				top:0;
				bottom:0;
				width: calc(100vw - 30px); /*vw - Viewport width. Does not take account of the scrollbar's width. Just taking away an arbitrary value for now*/
				border-bottom: 100%;
				z-index: -10;
				display: block;
				border-radius: 10px 10px 0px 0px;
				margin: auto;
			}
			.title{
				position: relative;
    			width: 700px;

				background-color: #c44687;
				font-weight: bold;
				font-size: 25px;
				margin-bottom: 15px;
				padding-left: 10px;
				padding-bottom: 5px;
				padding-top: 5px;

				border-radius: 10px 10px 0px 0px;
			}
			.title::after {
				content: " ";
				position: absolute;
				width:100%;
				height:100%;
				display: block;

				background-color: #c44687;
				transform-origin: bottom left;
				top: 0;
			    left: 0;
			    z-index: -1;

				border-radius: 10px 10px 0px 0px;
			    -ms-transform: skew(30deg, 0deg) translateX(30px);
			    -webkit-transform: skew(30deg, 0deg) translateX(30px);
			    transform: skew(30deg, 0deg) translateX(30px);

			    
			    /*: calc(100vw - 30px); /*vw - Viewport width. Does not take account of the scrollbar's width. Just taking away an arbitrary value for now*/
			}
			/*
			.title{
				background-color: #c44687;
				font-weight: bold;
				font-size: 25px;
				margin-bottom: 20px;
				padding-left: 5px;
				padding-bottom: 2px;
			}*/
			
			.brief{
				font-weight: bold;
				font-style: italic;
				margin-left: 20px;
			}
			.subtitle{
				background-color: #1c111b;
				font-size: 17px;
				border-radius: 25px;
				padding: 7px 14px 7px 14px;
				margin-left: 5px;
				margin-top: 20px;
				margin-bottom: 10px;
				display: inline-flex;
			}
			.subtitle::after{
				content: ":";
			}
			.code{
				background-color: #1c111b;
				font-family: "Courier New", monospace;
				border-radius: 10px;
				padding: 7px 9px 7px 9px;
				margin-left: 55px;
				margin-right: 100px;
				display: block;
			}
			.returns::before{
				content: "Returns: ";
				font-weight: bold;
				margin-left: 20px;
			}
			.footer {
				background-color: #1c111b;
				position: fixed;
				padding: 1px 1px 1px 3px;
				bottom: 0px;
				width: 100%;
				height: 30px;
				z-index: 100;
			}
			.note:before {
				content: "Note: ";
				font-style: italic;
				font-weight: bold;
			}
			.note {
				font-style: italic;
				font-weight: normal;
			}
			input[id^="spoiler"]{
				display: none;
			}
			input[id^="spoiler"] + label:hover {
				background-color: #c44687;
			}
			input[id^="spoiler"] + label:before {
				/*00a0 (non-breaking space). 0020 (normal space) doesn't work*/
				content: "‚ñ∫\00a0\00a0";
				color: #c44687;
				font-size: 16px;
			}
			input[id^="spoiler"] + label {
				display: block;
				width: 90%;
				background-color: #392D3D;
				
				font-weight: bold;
				/*font-size: 18px;
				margin-bottom: 20px;
				margin-left: 30px;
				margin-right: 30px;*/
				font-size: 1.2em;
				margin:0;
				padding:0.25em 0.25em 0.25em 0.5em;
				border-radius:0.5em;
				/*padding-left: 12px;
				padding-bottom: 6px;
				padding-top: 6px;*/
				text-align: left;
				margin: 0 auto;
				/*border-radius: 8px;*/

			}
			input[id^="spoiler"] ~ .spoiler {
			  width: 85%;
			  height: 0;
			  overflow: hidden;
			  opacity: 0;
			  margin: 0px auto 0; 
			  padding: 10px;
			}
			input[id^="spoiler"]:checked + label + .spoiler {
			  height: auto;
			  opacity: 1;
			  padding-bottom: 40px;
			}
			
			table{
				width:70%; 
				margin-left:15%; 
				margin-right:15%;
				margin-top: 20px;
				margin-bottom: 20px;
			}
			table, td, th{
				border-collapse: collapse;
				border: 1px solid #c44687;
				text-align: left;
				color: #f1f1f1;
			}
			th{
				background-color: #c44687;
				text-align: center;
			}
			tr:nth-child(even){
				background-color: #392d3d;
			}
			tr:nth-child(odd){
				background-color: #2d2330;
			}
			input{
				background-color: #ddd0dc;
				color: #281927;
				border-style: none;
				z-index: 100;
			}
			button{
				background-color: #589d62;
				color: #281927;
				border-style: none;
				z-index: 100;
			}
		</style>
	</head>
	<body>
		<div class="footer">
			<a href="#ref_home" style="font-size: 20px; margin-left: 5px; margin-right: 10px;">üè†</a>
			<input type="text" id="js_search" placeholder="Search for a script name..." /><button type="submit" onclick="js_find_tag();">‚ñ∫</button>
		</div>
		<!--
			Documentation
		-->
		<documentation id="ref_home">
			<div class="title">Home üè†</div>
			<p><i>If you are lost and want to return to this page, press the home symbol at the bottom left hand of the screen. Alternatively, if you are looking for a specific script, please use the search box located adjacent to said home button.</i></p>
			<p>Thank you for downloading this package! This runtime includes a vast range of scripts for constructing, accessing, managing, and rendering your own skeletal animations at runtime. Included in these scripts are proceedures for automatically decoding atlas and armature files from your favourite skeletal animation software into structures for use with your game.</p>
			<img src="./Assets/jumbotron.gif" style="display: block; margin-left: auto; margin-right: auto; width: 30%;"/>
			<div class="subtitle">Building and Rendering Your Skeletons</div>
			<p>This section will help get you started by introducing you to the system and its components, as well as describing how to perform the basic loading and manipulation of your skeleton data:</p>
			<ul>
				<li><a href="#ref_overview">Overview</a></li>
				<li><a href="#ref_gettingStarted">Getting Started</a></li>
				<li><a href="#ref_updatingYourArmature">Updating Your Armature</a></li>
				<li><a href="#ref_bakingSkeleton2VB">Baking Skeleton Data</a></li>
				<li><a href="#ref_debugOverlay">Debug Overlay</a></li>
			</ul>
			<div class="subtitle">Advanced Use</div>
			<p>If you want to get more familiar with the nitty-gritty of system, or learn some useful techniques for manipulating your skeleton data at runtime, this is the place for you. This section will go over the more overwhelming and powerful aspects of the runtime to help you get the most out of your animations:</p>
			<ul>
				<li><a href="#ref_animationState">Animation State</a></li>
				<li><a href="#ref_proceduralAnimation">Procedural Animation</a></li>
				<li><a href="#ref_skeletalManipulation">Manipulating Skeleton Data</a></li>
				<li><a href="#ref_usefulTechniques">Useful Techniques</a></li>
			</ul>
			<div class="subtitle">Links</div>
			<p>If you're having trouble or want to keep up to date, please visit one of the following links:</p>
			<ul>
				<li><a target="_blank" href="https://twitter.com/TAT3XD">My Twitter</a></li>
				<li><a target="_blank" href="https://forum.yoyogames.com/index.php?threads/2d-skeletal-animation-physics-integration.44898/">GMC Forum Post</a></li>
				<li><a target="_blank" href="https://github.com/NuxiiGit/GML2DSkeletalAnimation">GitHub Project Repository</a></li>
			</ul>
		</documentation>
		<documentation id="ref_overview">
			<div class="title">Overview</div>
		</documentation>
		<documentation id="ref_gettingStarted">
			<div class="title">Getting Started</div>

			<input type="checkbox" id="spoiler_loadingArmatures"/>
			<label for="spoiler_loadingArmatures">Loading Armatures</label>

			<div class="spoiler">
				<p>You have the option of building your armature from Spine, DragonBones, or Spriter formats using the following functions for each respectively:</p>
				<ul>
					<li><a href="#sk_armature_build_spine">sk_armature_build_spine</a></li>
					<li><a href="#sk_armature_build_dragonbones">sk_armature_build_dragonbones</a></li>
					<li><a href="#sk_armature_build_spriter">sk_armature_build_spriter</a></li>
				</ul>
				<p>Each of these functions will parse their respective json, and return a reference to the armature data structure if successful.
	If the build was unsuccessful, the function will return "noone", so you should always confirm the armature exists before attempting to render it.</p>
			</div>

			<input type="checkbox"  id="spoiler_loadingTextureAtlases"/>
			<label for="spoiler_loadingTextureAtlases">Loading Texture Atlases</label>

			<div class="spoiler">
				<p>To render your armatures, you need to supply a texture atlas so the renderer can look-up the UV coordinates of each attachment of your skeleton.
Similar to armatures, you have the option of building your texture atlases from Spine, DragonBones, or Spriter formats using the following functions:</p>
				<ul>
					<li><a href="#sk_atlas_build_libgdx">sk_atlas_build_libgdx</a></li>
					<li><a href="#sk_atlas_build_dragonbones">sk_atlas_build_dragonbones</a></li>
					<li><a href="#sk_atlas_build_spriter">sk_atlas_build_spriter</a></li>
				</ul>
			</div>
		</documentation>
		<documentation id="ref_updatingYourArmature">
			<div class="title">Updating Your Armature</div>
				<input type="checkbox"  id="spoiler_basicUpdateStructure"/>
				<label for="spoiler_basicUpdateStructure">Basic Update Structure</label>

				<div class="spoiler">
					<p>This engine is very "hands-off"; you have to do all the updating manually. This gives you the most control over your animations, but can be overwhelming
at first. Here I will explain the basic structure you should use to update your armatures.

In the following code, a spine armature with a single bone has been created and stored in the variable "armature":</p>
				<div class="code"><pre>
armature = sk_armature_build_spine(@'
    {
        "bones": [
            {
                "name": "bone",
                "length": 10,
                "rotation": -90
            }
        ]
    }',"myArmature"
 );</pre></div>
			 <p>To update this armature, we need to direct ourselfs to the step event (or whereever you are updating your skeleton), and first set our armature to its setup pose. To do this, we should call sk_armature_setToSetupPose(armature), which will iterate through all the bones and reset their applied state. Next, we need to calculate the bones world transform by calling sk_armature_updateWorldTransform(armature).

			 Your step event should look like this:</p>
			 <div class="code"><pre>
// set the armature to its setup pose
sk_armature_setToSetupPose(armature);

// calculate the armatures world state
sk_armature_updateWorldTransform(armature);</pre></div>

			<p>That should be all the code required to view the setup pose of your armature. Calling sk_armature_draw_debug(armature,x,y,1,1,0,sk_debug_bones) in
the draw event will draw a basic version of your armature without its attachments, so you can check you're doing things right.</p>
			</div>

			<input type="checkbox"  id="spoiler_applyingAnimations"/>
			<label for="spoiler_applyingAnimations">Applying Animations</label>

			<div class="spoiler">
				<p>To apply animations, you must first obtain the reference to the animation from the armature through the function sk_armature_find_animation, and then
use the corresponding sk_animation_apply function to apply the animation to your setup pose.</p>
				<div class="code"><pre>
// get the animation
var animation = sk_armature_find_animation(armature,"anim_run");

// set the armature to its setup pose
sk_armature_setToSetupPose(armature);

// check whether the animation exists
if(sk_struct_exists(animation)){
    // apply the animation
    var t = current_time*0.1; // the timer
    sk_animation_apply(animation,t,t,sk_mixPose_add,1,true);
}

// calculate the armatures world state
sk_armature_updateWorldTransform(armature);</pre></div>
				<p>This segment of code will find the reference to the animation called "anim_run" from the armature, and will apply it to the armature before updating its world transform.</p>

				<div class="note"> You can pre-obtain the animation in the create event and store them for later, this is purely as an example.</div>
			</div>
		</documentation>
		<documentation id="ref_bakingSkeleton2VB">
			<div class="title">Baking Skeleton Data</div>
			<div class="brief">Baking Your Skeleton Into a Vertex Buffer:</div>
			<p>Vertex buffers are the primary way to store and render your skeletons. To get started, you should create a target vertex buffer using 
vertex_create_buffer(). Using this buffer, we can now bake our skeleton onto it:</p>
			<div class="code"><pre>
// bake the skeleton data onto the vertex buffer, returning the texture target in the process
var texture = vertex_bake_armature(armature,atlas,vbuff);

// submit the vertex buffer with the skeleton texture
vertex_submit(vbuff,pr_trianglelist,texture);</pre></div>
			<p>This code will build the buffer and render it at the origin of your room. If you want to draw your skeleton at a different location, you will need to
transform the world matrix, then submit your buffer:</p>
<div class="code"><pre>
// update the world matrix so the buffer is drawn at the position of the object
var previous_matrix = matrix_get(matrix_world);
matrix_set(matrix_world,matrix_build(x,y,0,0,0,image_angle,image_xscale,image_yscale,0));

// submit the vertex buffer at the x and y position of the object
vertex_submit(vbuff,pr_trianglelist,texture);

// reset the world matrix
matrix_set(matrix_world,previous_matrix);</pre></div>
		</documentation>
		<documentation id="ref_debugOverlay">
			<div class="title">Debug Overlay</div>
			<p>When you have finished building your Armature/Atlas for the first time, you may need to check whether all the data was loaded correctly. That's where the following scripts relating to debugging come in handy:</p>
			<ul>
				<li><a href="#sk_armature_draw_debug">sk_armature_draw_debug</a></li>
				<li><a href="#sk_atlas_draw_debug">sk_atlas_draw_debug</a></li>
				<li><a href="#sk_bone_draw_debug">sk_bone_draw_debug</a></li>
			</ul>
			<p>Additionally, these functions are particularly useful in the case of modding, since you can supply these debug views to the community so they know what they've done is correct.</p>
		</documentation>
		<documentation id="ref_animationTypes">
			<div class="title">Animation Types</div>
			<p>The following are the available animations within the runtime:</p>
			<ul>
				<li><a href="#ref_simpleAnimation">Simple Animation</a></li>
				<li><a href="#ref_animationState">Animation State</a></li>
				<li><a href="#ref_proceduralAnimation">Procedural Animation</a></li>
			</ul>
		</documentation>
		<documentation id="ref_simpleAnimation">
			<div class="title">Simple Animation</div>
			<p>With simple animations, you will be able to play a single animation on your armature.</p>
			<p>If you wish to intorpolate between different animations without much effort, use <a href="#ref_animationState">Animation State</a>.</p>
			<div class="note">Animations must be destroyed when no longer needed to prevent memory leaks</div>
			<p>The following scripts exist for dealing with animations:</p>
			<ul>
				<li><a href="#sk_animation_create">sk_animation_create</a></li>
				<li><a href="#sk_animation_destroy">sk_animation_destroy</a></li>
				<li><a href="#sk_animation_get_duration">sk_animation_get_duration</a></li>
				<li><a href="#sk_animation_get_looping">sk_animation_get_looping</a></li>
				<li><a href="#sk_animation_set_duration">sk_animation_set_duration</a></li>
				<li><a href="#sk_animation_set_looping">sk_animation_set_looping</a></li>
				<li><a href="#sk_animation_add_timeline">sk_animation_add_timeline</a></li>
				<li><a href="#sk_animation_apply">sk_animation_apply</a></li>
			</ul>
			<div class="note">If you want to use an existing animation on your armature, use <a href="#sk_armature_find_animation">sk_armature_find_animation</a>.</div>
		</documentation>
		<documentation id="ref_animationState">
			<div class="title">Animation State</div>
			<p>Animation states makes it much easier to have animation blending.</p>


			<input type="checkbox" id="spoiler_animationBlending"/>
			<label for="spoiler_animationBlending">Animation Blending</label>

			<div class="spoiler">
				<p>Animation blending is a smooth transistion between two or more animations on a skeleton.</p>
				<p>Blending is handled through a queue system.</p>
				<img src="./Assets/animationState_queue.png" style="display: block; margin-left: auto; margin-right: auto; width: 50%;"/>
				<p>As the image implies, as new animations are added to the queue, the old animations remiain until it is completely overtaken by the latest animation.

				<p>In this runtime, "speed" determines the rate at which the animation will blend.</p>
				<p>A timestep indicates an interval of progress on the animation. A timestep of 1 would mean the animation would progress by 1 frame on each update, updated through <a href="#sk_animationState_update">sk_animationState_update</a>.</p>
				<p>Speed is between 0-1. 0 means that it will never blend between animations, and 1 means it would immediately blend between animations.</p>
				<p>The number of timesteps it would take for an animation to completely blend is determined by;</p>
				<div class="code">noOfTimesteps = 1/speed;</div>
				<p>For example; if the speed was set to 0.025, it would require 40 timesteps for the animation to successfully transistion to the next.</p>
			</div>

			<input type="checkbox" id="spoiler_availableScripts"/>
			<label for="spoiler_availableScripts">Available Scripts</label>

			<div class="spoiler">
				<div class="note">Animation states must be destroyed when no longer needed to prevent memory leaks.</div>
				<p>The following scripts exist for dealing with animation states:</p>
				<ul>
					<li><a href="#sk_animationState_create">sk_animationState_create</a></li>
					<li><a href="#sk_animationState_destroy">sk_animationState_destroy</a></li>
					<li><a href="#sk_animationState_get_animation_mix">sk_animationState_get_animation_mix</a></li>
					<li><a href="#sk_animationState_get_default_mix">sk_animationState_get_default_mix</a></li>
					<li><a href="#sk_animationState_get_timescale">sk_animationState_get_timescale</a></li>
					<li><a href="#sk_animationState_set_animation_mix">sk_animationState_set_animation_mix</a></li>
					<li><a href="#sk_animationState_set_default_mix">sk_animationState_set_default_mix</a></li>
					<li><a href="#sk_animationState_set_timescale">sk_animationState_set_timescale</a></li>

					<li><a href="#sk_animationState_draw_debug">sk_animationState_draw_debug</a></li>
					<li><a href="#sk_animationState_current_animation">sk_animationState_current_animation</a></li>
					<li><a href="#sk_animationState_play_animation">sk_animationState_play_animation</a></li>
					<li><a href="#sk_animationState_update">sk_animationState_update</a></li>
					<li><a href="#sk_animationState_apply">sk_animationState_apply</a></li>
					<li><a href="#sk_animationState_add_animation">sk_animationState_add_animation</a></li>
					<li><a href="#sk_animationState_add_armature">sk_animationState_add_armature</a></li>
					<li><a href="#sk_animationState_find_animation">sk_animationState_find_animation</a></li>
				</ul>
			</div>
		</documentation>
		<documentation id="ref_timelines">
			<div class="title">Timelines</div>
		</documentation>
		<documentation id="ref_proceduralAnimation">
			<div class="title">Procedural Animation</div>
		</documentation>
		<documentation id="ref_skeletalManipulation">
			<div class="title">Manipulating Skeleton Data</div>
		</documentation>
		<documentation id="ref_usefulTechniques">
			<div class="title">Useful Techniques</div>
		</documentation>
		<!--
			Scripts
		-->
		<documentation id="sk_animation_create">
			<div class="title">sk_animation_create</div>
			<div class="brief">Creates a new animation structure and returns its reference</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animation_create(name);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>Name</td>
					<td>The name of the structure <i>(this is used to identify the structure in the future).</i></td>
				</tr>
			</table>
			<div class="returns">Animation Struct</div>
			<div class="subtitle">Description</div>
			<p>This script is used to initialize a simple animation. </p>
			<p>If you wish to load an animation from an existing armature, use <a href="#sk_armature_find_animation">sk_armature_find_animation</a>.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var my_animation = sk_animation_create("anim_walk");</pre></div>
			<p>The example code will initialize a simple animation, and store the struct in "my_animation".</p>
		</documentation>

		<documentation id="sk_animation_destroy">
			<div class="title">sk_animation_destroy</div>
			<div class="brief">Deletes the supplied structure and unhooks its array</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animation_destroy(animation);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>Animation</td>
					<td>The animation (struct) you wish to destroy</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>You call this script whenever the animation is no longer needed.</p>
			<p>This can be written where the instance gets destroyed or when changing rooms.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var my_animation = sk_animation_create("anim_walk");
sk_animation_destroy(my_animation);</pre></div>
			<p>The example code will initialize an animation in "my_animation" and immediately deletes the animation.</p>
		</documentation>

		<documentation id="sk_animation_get_duration">
			<div class="title">sk_animation_get_duration</div>
			<div class="brief">Gets the duration of the animation (in steps)</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animation_get_duration(animation);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>Animation</td>
					<td>The animation you wish to get the duration from</td>
				</tr>
			</table>

			<div class="returns">Real</div>
			<div class="subtitle">Description</div>
			<p>This script will return the duration (in steps) of the animation that's defined from the editor's timeline</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
anim_walk_time = sk_animation_get_duration(anim_walk);</pre></div>
			<p>The example code would get the duration of the animation and store it into "anim_walk_time".</p>
		</documentation>

		<documentation id="sk_animation_get_looping">
			<div class="title">sk_animation_get_looping</div>
			<div class="brief">Checks if the animation is looping</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animation_get_looping(animation);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>Animation</td>
					<td>The animation you wish check if it's looping</td>
				</tr>
			</table>

			<div class="returns">Boolean</div>
			<div class="subtitle">Description</div>
			<p>This script will return true if the animation is looping, otherwise false.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
if sk_animation_get_looping(anim_walk) {
    if !audio_is_playing(snd_step) {
        audio_play_sound(snd_step, 1, true);
    }
} else {
    audio_stop_sound(snd_step);
}</pre></div>
			<p>The example code would check if the animation is looping. If the animation is looping and the sound is not currently playing, it will play a walk sound on loop. If the animation is not looping, the sound is stopped.</p>
		</documentation>

		<documentation id="sk_animation_set_duration">
			<div class="title">sk_animation_set_duration</div>
			<div class="brief">Sets the duration of the animation</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animation_set_duration(animation, duration);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>Animation</td>
					<td>The animation you wish to set the duration</td>
				</tr>
				<tr>
					<td>Duration</td>
					<td>The length you wish to set for the animation</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>This script will allow you to set the duration of the animation.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_animation_set_duration(anim_walk, 80);</pre></div>
			<p>The example code would set the duration of the animation to 80 steps.</p>
		</documentation>

		<documentation id="sk_animation_set_looping">
			<div class="title">sk_animation_set_looping</div>
			<div class="brief">Sets whether the animation should loop or not</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animation_set_looping(animation, enable);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>Animation</td>
					<td>The animation you wish to set the duration</td>
				</tr>
				<tr>
					<td>Enable</td>
					<td>Whether the animation should loop or not</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>This script will allow you to set whether the animation should loop or not</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_animation_set_looping(anim_walk, true);</pre></div>
			<p>The example code would enable the animation to loop.</p>
		</documentation>

		<documentation id="sk_animation_add_timeline">
			<div class="title">sk_animation_add_timeline</div>
			<div class="brief">Adds a timeline to an animation</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animation_add_timeline(animation, timeline);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>Animation</td>
					<td>The animation you wish to set the duration</td>
				</tr>
				<tr>
					<td>Timeline</td>
					<td>The timeline you wish to add to your animation</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>This script adds a timeline to an animation.</p>
			<div class="note">See <a href="#ref_timelines">Timelines</a> to read more about timelines</div>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_animation_add_timeline(anim_walk, keyframe);</pre></div>
			<p>The example code adds a timeline called "keyframe" to the animation.</p>
		</documentation>

		<documentation id="sk_animation_apply">
			<div class="title">sk_animation_apply</div>
			<div class="brief">Sets the pose for the specified time</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animation_apply(animation, timeLast, time, mixPose, alpha, wrap);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>Animation</td>
					<td>The animation you wish to apply a pose</td>
				</tr>
				<tr>
					<td>TimeLast</td>
					<td>The time from the previous update</td>
				</tr>
				<tr>
					<td>Time</td>
					<td>The current time to set the pose</td>
				</tr>
				<tr>
					<td>MixPose</td>
					<td>Should this overwrite current animation pose (false), or "add" it (true). This is useful if you want to blend animations (Default is false)</td>
				</tr>
				<tr>
					<td>Alpha</td>
					<td>How much of an effect it should have on the armature (2 = 2x larger change, 1 = normal, 0 = no effect)</td>
				</tr>
				<tr>
					<td>Wrap</td>
					<td>Whether the animation should wrap back to the beginning of the animation once it reaches the end of the animation or not</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>Whenever you want your armature to play an animation, you will call this script to set the animation pose. You will need to supply a time so that the runtime knows what timeline(s) the animation pose should be near (or at).</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_armature_setToSetupPose(my_armature);
sk_animation_apply(anim_walk, timeLast, current_time*0.05, false, 1, true);
sk_armature_updateWorldTransform(my_armature);

timeLast = current_time*0.05;</pre></div>
			<p>The example code first resets our armature pose. After that, we update our animation pose, then apply our animation pose to the armature pose.
			Once the scripts have been executed, we get the current time to be used for the next animation update (step).</p>
		</documentation>

		<documentation id="sk_animationState_create">
			<div class="title">sk_animationState_create</div>
			<div class="brief">Creates a new animation state structure and returns its reference</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_create(name);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>Name</td>
					<td>The name of the structure <i>(this is used to identify the structure in the future).</i></td>
				</tr>
			</table>
			<div class="returns">Animation State Struct</div>
			<div class="subtitle">Description</div>
			<p>This script is used to initialize an animation state.</p>
			<p>If you wish to load an animation from an existing armature, use <a href="#sk_armature_find_animation">sk_armature_find_animation</a>.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
my_animationState = sk_animationState_create("animation");</pre></div>
			<p>The example code will initialize an animation state, and store the struct in "my_animationState".</p>
		</documentation>

		<documentation id="sk_animationState_destroy">
			<div class="title">sk_animationState_destroy</div>
			<div class="brief">Deletes the supplied structure and unhooks its array</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_destroy(animationState);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to destroy</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>You call this script whenever the animation state is no longer needed.</p>
			<p>This can be written where the instance gets destroyed or when changing rooms.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var my_animationState = sk_animationState_create("anim_walk");
sk_animationState_destroy(my_animationState);</pre></div>
			<p>The example code will initialize an animation in "my_animation" and immediately deletes the animation state.</p>
		</documentation>

		<documentation id="sk_animationState_get_animation_mix">
			<div class="title">sk_animationState_get_animation_mix</div>
			<div class="brief">Gets the current blend between 2 animations</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_get_animation_mix(animationState, animfrom, animto);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to get the animation mix from</td>
				</tr>
				<tr>
					<td>Animfrom</td>
					<td>The animation alias from the starting animation</td>
				</tr>
				<tr>
					<td>Animto</td>
					<td>The animation alias to the target animation</td>
				</tr>
			</table>

			<div class="returns">Real</div>
			<div class="subtitle">Description</div>
			<p>This script returns the blend ratio between the 2 animations.</p>
			<div class="note">For more information about how blending works in animation states, see <a href="#ref_animationState">Animation States</a>.</div>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_animationState_add_animation(anim_state, anim_idle, "idle");
sk_animationState_add_animation(anim_state, anim_walk, "walk");

sk_animationState_set_animation_mix(anim_state, "idle", "walk", 0.1);

show_message(sk_animationState_get_animation_mix(anim_state, "idle", "walk"));</pre></div>
			<p>The example code will first add 2 animations to the animation state with an alias to be identified by future scripts. After that, the animation blend from idle to walk is set to 0.1. We then promt the user with a message that tells us the the blend from "idle" to "walk", which would be 0.1.</p>
		</documentation>

		<documentation id="sk_animationState_get_default_mix">
			<div class="title">sk_animationState_get_default_mix</div>
			<div class="brief">Gets the default animation mix for all animations</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_get_default_mix(animationState);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to get the default animation mix for</td>
				</tr>
			</table>

			<div class="returns">Real</div>
			<div class="subtitle">Description</div>
			<p>Each animation state would have a default animation mix speed. If the speed ratio between the animations have not been determined, they will use this value instead.</p>
			<div class="note">For more information about how blending works in animation states, see <a href="#ref_animationState">Animation States</a>.</div>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
anim_mix = sk_animationState_get_default_mix(anim_state);</pre></div>
			<p>The example code gets the default mix value and stores it into "anim_mix".</p>
		</documentation>

		<documentation id="sk_animationState_get_timescale">
			<div class="title">sk_animationState_get_timescale</div>
			<div class="brief">Gets the timescale for the supplied animation state</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_get_timescale(animationState);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to get the timescale from</td>
				</tr>
			</table>

			<div class="returns">Real</div>
			<div class="subtitle">Description</div>
			<p>Timescale is the ratio at which the animtion should play. Setting it to 2 would play the animations at 2x the speed, and setting it to 0.5 would play it at 0.5x the speed.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
anim_timescale = sk_animationState_get_timescale(anim_state);</pre></div>
			<p>The example code gets the timescale and stores it into "anim_timescale".</p>
		</documentation>

		<documentation id="sk_animationState_set_animation_mix">
			<div class="title">sk_animationState_set_animation_mix</div>
			<div class="brief">Sets the blend from one animation to another</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_set_animation_mix(animationState, animfrom, animto, speed);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to get the animation mix from</td>
				</tr>
				<tr>
					<td>Animfrom</td>
					<td>The animation alias from the starting animation</td>
				</tr>
				<tr>
					<td>Animto</td>
					<td>The animation alias to the target animation</td>
				</tr>
				<tr>
					<td>Speed</td>
					<td>The ratio of how fast the animation blends</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>This script sets the blend ratio between the 2 animations.</p>
			<div class="note">For more information about how blending works in animation states, see <a href="#ref_animationState">Animation States</a>.</div>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_animationState_set_animation_mix(anim_state, "idle", "walk", 0.1);
sk_animationState_set_animation_mix(anim_state, "walk", "idle", 0.4);</pre></div>
			<p>This code example sets the mix speed from "idle" to "walk" as 0.1, and "walk" to "idle" as 0.4. This means that it will be quicker for the animation to blend from "walk" to "idle", than it is to go from "idle" to "walk".</p>
		</documentation>

		<documentation id="sk_animationState_set_default_mix">
			<div class="title">sk_animationState_set_default_mix</div>
			<div class="brief">Sets the default animation mix for all animations within the animation state</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_set_default_mix(animationState, speed);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to get the default animation mix for</td>
				</tr>
				<tr>
					<td>Speed</td>
					<td>The default ratio for all animation blendings</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>Each animation state would have a default animation mix speed. If the speed ratio between the animations have not been determined, they will use this value instead.</p>
			<div class="note">For more information about how blending works in animation states, see <a href="#ref_animationState">Animation States</a>.</div>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_animationState_set_default_mix(anim_state, 0.1);</pre></div>
			<p>The example code sets the default mix value for the animation state, "anim_state" to 0.1.</p>
		</documentation>

		<documentation id="sk_animationState_set_timescale">
			<div class="title">sk_animationState_set_timescale</div>
			<div class="brief">Sets the timescale for the supplied animation state</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_set_timescale(animationState, scale);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to set the timescale</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>Timescale is the ratio at which the animtion should play. Setting it to 2 would play the animations at 2x the speed, and setting it to 0.5 would play it at 0.5x the speed.</p>
			<p>Since the animation state does not take account of the animation speed, we have to define the rate it animates.</p>
			<div class="note">It doesn't have to be defined here. You can also change the rate through <a href="#sk_animationState_update">sk_animationState_update</a>. This is just to make things slightly more manageable.</div>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var animation_fps = 36;
sk_animationState_set_timescale(anim_state, animation_fps/game_get_speed(gamespeed_fps));</pre></div>
			<p></p>
		</documentation>

		<documentation id="sk_animationState_draw_debug">
			<div class="title">sk_animationState_draw_debug</div>
			<div class="brief">Draws debug information about the animation state</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_draw_debug(animationState, x, y);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to draw debug information from</td>
				</tr>
				<tr>
					<td>X</td>
					<td>The x-coordinate to draw the debug information</td>
				</tr>
				<tr>
					<td>Y</td>
					<td>The y-coordinate to draw the debug information</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>This script draws debugging information about the animation state.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_animationState_draw_debug(anim_state);</pre></div>
			<p>The example code sets timescale to 1, so that the animation plays at a normal rate.</p>
		</documentation>

		<documentation id="sk_animationState_current_animation">
			<div class="title">sk_animationState_current_animation</div>
			<div class="brief">Returns the current animation string being played</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_current_animation(animationState);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to get the current animation being played</td>
				</tr>
			</table>

			<div class="returns">String</div>
			<div class="subtitle">Description</div>
			<p>This script returns the name of the target animation being played.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
draw_text(x,y,sk_animationState_current_animation(anim_state));</pre></div>
			<p>The example code draws the current animation being played at its location.</p>
		</documentation>

		<documentation id="sk_animationState_current_animation">
			<div class="title">sk_animationState_current_animation</div>
			<div class="brief">Returns the current animation string being played</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_current_animation(animationState);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to get the current animation being played</td>
				</tr>
			</table>

			<div class="returns">String</div>
			<div class="subtitle">Description</div>
			<p>This script returns the name of the target animation being played.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
draw_text(x,y,sk_animationState_current_animation(anim_state));</pre></div>
			<p>The example code draws the current animation being played at its location.</p>
		</documentation>

		<documentation id="sk_animationState_play_animation">
			<div class="title">sk_animationState_play_animation</div>
			<div class="brief">Pushes the supplied animation to the animation queue</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_play_animation(animationState, animationName, loop);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to get the current animation being played</td>
				</tr>
				<tr>
					<td>AnimationName</td>
					<td>The name of the animation you wish to play</td>
				</tr>
				<tr>
					<td>Loop</td>
					<td>Whether the animation should loop or not</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>This script pushes a supplied animation to the animation queue.</p>
			<div class="note">To learn more about how queueing works in animation states, see <a href="#ref_animationState">Animation States</a></div>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_animationState_play_animation(anim_state, "walk", true));</pre></div>
			<p>The example code pushes the "walk" animation to the animation queue.</p>
		</documentation>

		<documentation id="sk_animationState_update">
			<div class="title">sk_animationState_update</div>
			<div class="brief">Updates the animation state</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_update(animationState, timestep);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to update</td>
				</tr>
				<tr>
					<td>timestep</td>
					<td>How much to update the animation by (often 1)</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>For updating your animation state, you generally want set the timestep as 1 if your game is frame-locked.</p>
			<p>If you set your timestep as 1, you will be looking at your animation states to update like this;</p>
			<p>1 game frame (step) = 1 animation frame</p>
			<p>However, you may not want your animations to run at your room speed. You can adjust the rate here, or you can adjust the animation rate in <a href="#sk_animationState_set_timescale">sk_animationState_set_timescale</a></p>
			<p>If your game is geared towards delta timing, you can use your delta value here.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_animationState_update(anim_state, 1));</pre></div>
			<p>The example code updates the animation state by 1 frame.</p>
		</documentation>

		<documentation id="sk_animationState_apply">
			<div class="title">sk_animationState_apply</div>
			<div class="brief">Applies the animation(s) transformations to an armature</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_apply(animationState, timestep);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to get the current animation being played</td>
				</tr>
				<tr>
					<td>Alpha</td>
					<td>How much of an effect it should have on the armature (2 = 2x larger change, 1 = normal, 0 = no effect)</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>This script applies the animation state to the armature that has been added to the animation state.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_animationState_apply(anim_state, 1));</pre></div>
			<p>The example code applies the animation(s) to the armature with an alpha value of 1.</p>
		</documentation>

		<documentation id="sk_animationState_add_animation">
			<div class="title">sk_animationState_add_animation</div>
			<div class="brief">Add an animation to the animation state</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_add_animation(animationState, anim, [alias]);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to add the animation to</td>
				</tr>
				<tr>
					<td>Anim</td>
					<td>The animation you wish to add to the animation state</td>
				</tr>
				<tr>
					<td>Alias (optional)</td>
					<td>The name you wish to give to your animation. This can be used to help identify the animation for future scripts</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>This script adds an animation to the animation state.</p>
			<div class="note">This script is not necessary if you're not manually creating new animations. Using <a href="#sk_animationState_add_armature">sk_animationState_add_armature</a> will automatically add all the animations from the armature.</div>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
anim_walk = sk_animation_create("walk");
sk_animationState_add_animation(anim_state, anim_walk);</pre></div>
			<p>The example code creates an animation and adds it to the animation state. "walk" will be used to indentify the animation within the animation state in the future.</p>
		</documentation>

		<documentation id="sk_animationState_add_armature">
			<div class="title">sk_animationState_add_armature</div>
			<div class="brief">Adds all animations from the armature to the animation state</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_add_armature(animationState, armature);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to add the animation(s) to</td>
				</tr>
				<tr>
					<td>Armature</td>
					<td>The armature animation(s) you wish to add to the animation state</td>
				</tr>
			</table>

			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>This script adds all animations from the supplied armature to the animation state.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
sk_animationState_add_armature(anim_state, my_armature);</pre></div>
			<p>The example code adds an already defined armature to the animation state called "anim_state".</p>
		</documentation>

		<documentation id="sk_animationState_find_animation">
			<div class="title">sk_animationState_find_animation</div>
			<div class="brief"></div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_animationState_find_animation(animationState, name);</div>
			
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>AnimationState</td>
					<td>The animation state (struct) you wish to search for an animation</td>
				</tr>
				<tr>
					<td>Name</td>
					<td>The animation you wish to find within the animation state</td>
				</tr>
			</table>

			<div class="returns">Animation Struct</div>
			<div class="subtitle">Description</div>
			<p>This script will return the animation struct if found. Otherwise, it would return undefined.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
anim_walk = sk_animationState_find_animation(anim_state, "walk");</pre></div>
			<p>The example code will find an animation in the animation state under the alias of "walk". If the animation is found, it would return an animation struct.</p>
		</documentation>

		<documentation id="sk_bone_create">
			<div class="title">sk_bone_create</div>
			<div class="brief">Creates a new bone structure and returns its reference.</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_bone_create(name);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>Name</td>
					<td>The name of the structure.</td>
				</tr>
			</table>
			<div class="returns">Bone</div>
			<div class="subtitle">Description</div>
			<p>This script can be used to create a new bone at runtime; these can be added to an armature using <a href="#sk_armature_add_bone">sk_armature_add_bone</a>.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var my_bone = bone_create("b_arm");
sk_bone_set_position(my_bone,10,20);</pre></div>
			<p>The example code creates a new bone called "b_arm", and stores it in the variable "my_bone". It's local position is then set to (10,20).</p>
		</documentation>
		
		<documentation id="sk_armature_build_spine">
			<div class="title">sk_armature_build_spine</div>
			<div class="brief">Parses the supplied json, and returns a reference to the armature data structure if it was successful.</div>
			<div class="subtitle">Syntax</div>
			<div class="code"><pre>
sk_armature_build_spine(json, name)</pre></div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>JSON</td>
					<td>A string containing a json structure in the spine skeleton file format.</td>
				</tr>
				<tr>
					<td>Name</td>
					<td>The name to give to the armature (it could be anything).</td>
				</tr>
			</table>
			<div class="returns">Armature Struct</div>
			<div class="subtitle">Description</div>
			<p>This script will parse the supplied json, and returns a reference to the armature data structure if it was successful.
If the build was unsuccessful, the function will return "noone", so you should always confirm the armature exists before attempting to render it.</p>
<div class="note">The name of the armature has no significant value. It's purely cosmetic.</div>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var PATH_SPINEBOY = "Skeletons/Spine/Esoteric/Spineboy/spineboy-ess.json";
var file = file_text_open_read(PATH_SPINEBOY);
var raw = "";
do {
    raw += file_text_read_string(file)+"\n";
    file_text_readln(file);
} until(file_text_eof(file));
file_text_close(file);

armature_spineboy = sk_armature_build_spine(raw, "");</pre></div>
			<p>The example code will store the path to the armature in "PATH_SPINEBOY", and the file contents is converted into a string. After that, the string is passed into sk_armature_build_spine, and an empty name for the armature is supplied.</p>
		</documentation>
		<documentation id="sk_armature_build_dragonbones">
			<div class="title">sk_armature_build_dragonbones</div>
			<div class="brief">Parses the supplied json, and returns a reference to the armature data structure if it was successful.</div>
			<div class="subtitle">Syntax</div>
			<div class="code"><pre>
sk_armature_build_dragonbones(json, armature_name_or_id)</pre></div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>JSON</td>
					<td>A string containing a json structure in the dragonbones skeleton file format.</td>
				</tr>
				<tr>
					<td>Armature_name_or_id</td>
					<td>The name or id of the armature you want to load (as specified in the editor).</td>
				</tr>
			</table>
			<div class="returns">Armature Struct</div>
			<div class="subtitle">Description</div>
			<p>This script will parse the supplied json, and returns a reference to the armature data structure if it was successful.
If the build was unsuccessful, the function will return "noone", so you should always confirm the armature exists before attempting to render it.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var PATH_DRAGON = "Skeletons/DragonBones/Egret/Dragon/Dragon_ske.json";
var file = file_text_open_read(PATH_DRAGON);
var raw = "";
do {
    raw += file_text_read_string(file)+"\n";
    file_text_readln(file);
} until(file_text_eof(file));
file_text_close(file);

armature_dragon = sk_armature_build_dragonbones(raw, "0");</pre></div>
			<p>The example code will store the path to the armature in "PATH_DRAGON", and the file contents is converted into a string. After that, the string is passed into sk_armature_build_dragonbones, using armature "0" that's defined in the editor.</p>
		</documentation>
		<documentation id="sk_armature_build_spriter">
			<div class="title">sk_armature_build_spriter</div>
			<div class="brief">Parses the supplied json, and returns a reference to the armature data structure if it was successful.</div>
			<div class="subtitle">Syntax</div>
			<div class="code"><pre>
sk_armature_build_spriter(json, armature_name_or_id)</pre></div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>JSON</td>
					<td>A string containing a json structure in the spriter skeleton file format.</td>
				</tr>
				<tr>
					<td>Armature_name_or_id</td>
					<td>The name or id of the armature you want to load (as specified in the editor).</td>
				</tr>
			</table>
			<div class="returns">Armature Struct</div>
			<div class="subtitle">Description</div>
			<p>This script will parse the supplied json, and returns a reference to the armature data structure if it was successful.
If the build was unsuccessful, the function will return "noone", so you should always confirm the armature exists before attempting to render it.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var PATH_SPRITER = "Skeletons/Spriter/BrashMonkey/Platformer/outJSONskel.scon";
var file = file_text_open_read(PATH_SPRITER);
var raw = "";
do {
    raw += file_text_read_string(file)+"\n";
    file_text_readln(file);
} until(file_text_eof(file));
file_text_close(file);

armature_platformer = sk_armature_build_spriter(raw, "0");</pre></div>
			<p>The example code will store the path to the armature in "PATH_SPRITER", and the file contents is converted into a string. After that, the string is passed into sk_armature_build_spriter, using armature "0" that's defined in the editor.</p>
		</documentation>
		<documentation id="sk_atlas_build_libgdx">
			<div class="title">sk_atlas_build_libgdx</div>
			<div class="brief">Constructs an atlas file to be used with your armatures.</div>
			<div class="subtitle">Syntax</div>
			<div class="code"><pre>
sk_atlas_build_libgdx(libgdx, sprite, subimg, scale)</pre></div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>libgdx</td>
					<td>A multi-line raw-text string in the libgdx atlas format, this is the export format of spine.</td>
				</tr>
				<tr>
					<td>sprite</td>
					<td>The index of the sprite to use as a texture</td>
				</tr>
				<tr>
					<td>subimg</td>
					<td>The subimage index for the sprite</td>
				</tr>
				<tr>
					<td>scale</td>
					<td>A multiplier to scale each region by</td>
				</tr>
			</table>
			<div class="returns">Atlas Struct</div>
			<div class="subtitle">Description</div>
			<p>To render your armatures, you need to supply a texture atlas so the renderer can look-up the UV coordinates of each attachment of your skeleton.
Similar to armatures, you have the option of building your texture atlases from Spine.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var PATH_SPINEBOY_SPRITE = "spineboy.png";
var PATH_SPINEBOY_ATLAS = "spineboy.atlas";
var sprite = sprite_add(PATH_SPINEBOY_SPRITE, 1, false, 0, 0);
var file = file_text_open_read(PATH_SPINEBOY_ATLAS);
var raw = "";
do {
    raw += file_text_read_string(file)+"\n";
    file_text_readln(file);
} until(file_text_eof(file));
file_text_close(file);

atlas_spineboy = sk_atlas_build_libgdx(raw, sprite, 0, 1);</pre></div>
			<p>The example code will store the path to the image in "PATH_SPINEBOY_SPRITE", the path to the atlas in "PATH_SPINEBOY_ATLAS", and the file contents of the atlas is converted into a string. After that, the string is passed into sk_atlas_build_libgdx.</p>
		</documentation>
		<documentation id="sk_atlas_build_dragonbones">
			<div class="title">sk_atlas_build_dragonbones</div>
			<div class="brief">Constructs an atlas file to be used with your armatures.</div>
			<div class="subtitle">Syntax</div>
			<div class="code"><pre>
sk_atlas_build_dragonbones(json, sprite, subimg, scale)</pre></div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>json</td>
					<td>A string containing a json structure in the dragonbones texture atlas file format</td>
				</tr>
				<tr>
					<td>sprite</td>
					<td>The index of the sprite to use as a texture</td>
				</tr>
				<tr>
					<td>subimg</td>
					<td>The subimage index for the sprite</td>
				</tr>
				<tr>
					<td>scale</td>
					<td>A multiplier to scale each region by</td>
				</tr>
			</table>
			<div class="returns">Atlas Struct</div>
			<div class="subtitle">Description</div>
			<p>To render your armatures, you need to supply a texture atlas so the renderer can look-up the UV coordinates of each attachment of your skeleton.
Similar to armatures, you have the option of building your texture atlases from Dragonbones.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var PATH_DRAGON_SPRITE = "Dragon_tex.png";
var PATH_DRAGON_ATLAS = "Dragon_tex.json";
var sprite = sprite_add(PATH_DRAGON_SPRITE, 1, false, 0, 0);
var file = file_text_open_read(PATH_DRAGON_ATLAS);
var raw = "";
do {
    raw += file_text_read_string(file)+"\n";
    file_text_readln(file);
} until(file_text_eof(file));
file_text_close(file);

atlas_dragon = sk_atlas_build_dragonbones(raw, sprite, 0, 1);</pre></div>
			<p>The example code will store the path to the image in "PATH_DRAGON_SPRITE", the path to the atlas in "PATH_DRAGON_ATLAS", and the file contents of the atlas is converted into a string. After that, the string is passed into sk_atlas_build_dragonbones.</p>
		</documentation>
		<documentation id="sk_atlas_build_spriter">
			<div class="title">sk_atlas_build_spriter</div>
			<div class="brief">Constructs an atlas file to be used with your armatures.</div>
			<div class="subtitle">Syntax</div>
			<div class="code"><pre>
sk_atlas_build_spriter(json, sprite, subimg, scale)</pre></div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>json</td>
					<td>A string containing a json structure in the spriter texture atlas file format</td>
				</tr>
				<tr>
					<td>sprite</td>
					<td>The index of the sprite to use as a texture</td>
				</tr>
				<tr>
					<td>subimg</td>
					<td>The subimage index for the sprite</td>
				</tr>
				<tr>
					<td>scale</td>
					<td>A multiplier to scale each region by</td>
				</tr>
			</table>
			<div class="returns">Atlas Struct</div>
			<div class="subtitle">Description</div>
			<p>To render your armatures, you need to supply a texture atlas so the renderer can look-up the UV coordinates of each attachment of your skeleton.
Similar to armatures, you have the option of building your texture atlases from Spriter.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var PATH_SPRITER_SPRITE = "outJSON.png";
var PATH_SPRITER_ATLAS = "outJSON.json";
var sprite = sprite_add(PATH_SPRITER_ATLAS, 1, false, 0, 0);
var file = file_text_open_read(PATH_SPRITER_ATLAS);
var raw = "";
do {
    raw += file_text_read_string(file)+"\n";
    file_text_readln(file);
} until(file_text_eof(file));
file_text_close(file);

atlas_platformer = sk_atlas_build_spriter(raw, sprite, 0, 1);</pre></div>
			<p>The example code will store the path to the image in "PATH_SPRITER_SPRITE", the path to the atlas in "PATH_SPRITER_ATLAS", and the file contents of the atlas is converted into a string. After that, the string is passed into sk_atlas_build_spriter.</p>
		</documentation>
		<br/><br/>
	</body>
</html>