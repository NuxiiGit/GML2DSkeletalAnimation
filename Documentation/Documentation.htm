<!DOCTYPE html>
<html>
	<head>
		<title>2DSkeletalAnimation Script Documentation</title>
		<script type="text/javascript">
			// update the tag
            function js_find_tag(){
				var js_searchBar = document.getElementById("js_search");
				location.href = "#"+js_searchBar.value;
				js_searchBar.value = ""; // reset value
			}
			// create event listener for the search bar
			window.addEventListener("load",
				function(){
					document.getElementById("js_search").addEventListener("keypress",
						function(e){
							if(e.keyCode==13){
								js_find_tag();
							}
						}
					);
					// create custom tags
					document.createElement("documentation");
				}
			);
        </script>
		<style>
			body{
				background-color: #281927;
				font-family: Arial, serif;
				font-size: 14px;
				color: #ddd0dc;
			}
			p{
				margin-left: 5px;
			}
			a{
				font-weight: bold;
				text-decoration-line: none;
				color: #ff43a4;
			}
			.title{
				background-color: #c44687;
				font-weight: bold;
				font-size: 25px;
				margin-bottom: 20px;
				padding-left: 5px;
				padding-bottom: 2px;
			}
			.brief{
				font-weight: bold;
				font-style: italic;
				margin-left: 20px;
			}
			.subtitle{
				background-color: #1c111b;
				font-size: 17px;
				border-radius: 25px;
				padding: 7px 14px 7px 14px;
				margin-left: 5px;
				margin-top: 20px;
				margin-bottom: 10px;
				display: inline-flex;
			}
			.subtitle::after{
				content: ":";
			}
			.code{
				background-color: #1c111b;
				font-family: "Courier New", monospace;
				border-radius: 10px;
				padding: 7px 9px 7px 9px;
				margin-left: 55px;
				margin-right: 100px;
				display: block;
			}
			.returns::before{
				content: "Returns: ";
				font-weight: bold;
				margin-left: 20px;
			}
			.footer{
				background-color: #1c111b;
				position: fixed;
				padding: 1px 1px 1px 3px;
				bottom: 0px;
				width: 100%;
				height: 30px;
			}
			table{
				width:70%; 
				margin-left:15%; 
				margin-right:15%;
				margin-top: 20px;
				margin-bottom: 20px;
			}
			table, td, th{
				border-collapse: collapse;
				border: 1px solid #c44687;
				text-align: left;
				color: #f1f1f1;
			}
			th{
				background-color: #c44687;
				text-align: center;
			}
			tr:nth-child(even){
				background-color: #392d3d;
			}
			tr:nth-child(odd){
				background-color: #2d2330;
			}
			input{
				background-color: #ddd0dc;
				color: #281927;
				border-style: none;
			}
			button{
				background-color: #589d62;
				color: #281927;
				border-style: none;
			}
		</style>
	</head>
	<body>
		<div class="footer">
			<a href="#ref_home" style="font-size: 20px; margin-left: 5px; margin-right: 10px;">üè†</a>
			<input type="text" id="js_search" placeholder="Search for a script name..." /><button type="submit" onclick="js_find_tag();">‚ñ∫</button>
		</div>
		<!--
			Documentation
		-->
		<documentation id="ref_home">
			<div class="title">Home üè†</div>
			<p><i>If you are lost and want to return to this page, press the home symbol at the bottom left hand of the screen. Alternatively, if you are looking for a specific script, please use the search box located adjacent to said home button.</i></p>
			<p>Thank you for downloading this package! This runtime includes a vast range of scripts for constructing, accessing, managing, and rendering your own skeletal animations at runtime. Included in these scripts are proceedures for automatically decoding atlas and armature files from your favourite skeletal animation software into structures for use with your game.</p>
			<img src="./Assets/jumbotron.gif" style="display: block; margin-left: auto; margin-right: auto; width: 30%;"/>
			<div class="subtitle">Building and Rendering Your Skeletons</div>
			<p>This section will help get you started by introducing you to the system and its components, as well as describing how to perform the basic loading and manipulation of your skeleton data:</p>
			<ul>
				<li><a href="#ref_overview">Overview</a></li>
				<li><a href="#ref_updatingYourArmature">Updating Your Armature</a></li>
				<li><a href="#ref_bakingSkeleton2VB">Baking Skeleton Data</a></li>
				<li><a href="#ref_debugOverlay">Debug Overlay</a></li>
			</ul>
			<div class="subtitle">Advanced Use</div>
			<p>If you want to get more familiar with the nitty-gritty of system, or learn some useful techniques for manipulating your skeleton data at runtime, this is the place for you. This section will go over the more overwhelming and powerful aspects of the runtime to help you get the most out of your animations:</p>
			<ul>
				<li><a href="#ref_structs">Structure Types</a></li>
				<li><a href="#ref_animationState">Animation State</a></li>
				<li><a href="#ref_proceeduralAnim">Proceedural Animation</a></li>
				<li><a href="#ref_skeletalManipulation">Manipulating Skeleton Data</a></li>
				<li><a href="#ref_usefulTechniques">Useful Techniques</a></li>
			</ul>
			<div class="subtitle">Links</div>
			<p>If you're having trouble or want to keep up to date, please visit one of the following links:</p>
			<ul>
				<li><a target="_blank" href="https://twitter.com/TAT3XD">My Twitter</a></li>
				<li><a target="_blank" href="https://forum.yoyogames.com/index.php?threads/2d-skeletal-animation-physics-integration.44898/">GMC Forum Post</a></li>
				<li><a target="_blank" href="https://github.com/NuxiiGit/GML2DSkeletalAnimation">GitHub Project Repository</a></li>
			</ul>
		</documentation>
		<documentation id="ref_overview">
			<div class="title">Overview</div>
		</documentation>
		<documentation id="ref_updatingYourArmature">
			<div class="title">Updating Your Armature</div>
		</documentation>
		<documentation id="ref_bakingSkeleton2VB">
			<div class="title">Baking Skeleton Data</div>
		</documentation>
		<documentation id="ref_debugOverlay">
			<div class="title">Debug Overlay</div>
			<p>When you have finished building your Armature/Atlas for the first time, you may need to check whether all the data was loaded correctly. That's where the following scripts relating to debugging come in handy:</p>
			<ul>
				<li><a href="#sk_armature_draw_debug">sk_armature_draw_debug</a></li>
				<li><a href="#sk_atlas_draw_debug">sk_atlas_draw_debug</a></li>
				<li><a href="#sk_bone_draw_debug">sk_bone_draw_debug</a></li>
			</ul>
			<p>Additionally, these functions are particularly useful in the case of modding, since you can supply these debug views to the community so they know what they've done is correct.</p>
		</documentation>
		<documentation id="ref_structs">
			<div class="title">Structure Types</div>
		</documentation>
		<documentation id="ref_animationState">
			<div class="title">Animation State</div>
		</documentation>
		<documentation id="ref_proceeduralAnim">
			<div class="title">Proceedural Animation</div>
		</documentation>
		<documentation id="ref_skeletalManipulation">
			<div class="title">Manipulating Skeleton Data</div>
		</documentation>
		<documentation id="ref_usefulTechniques">
			<div class="title">Useful Techniques</div>
		</documentation>
		<!--
			Scripts
		-->
		<documentation id="sk_struct_type_add">
			<div class="title">sk_struct_type_add</div>
			<div class="brief">Creates a structure type template for future construction of child types.</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_struct_type_add(type, size, constructor, destructor);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>type</td>
					<td>The name of the structure type.</td>
				</tr>
				<tr>
					<td>size</td>
					<td>The number of indicies to allocate for storing data.</td>
				</tr>
				<tr>
					<td>constructor</td>
					<td>An index of the script that is called when constructing the structure with <a href="#sk_struct_create">sk_struct_create</a>.</td>
				</tr>
				<tr>
					<td>destructor</td>
					<td>An index of the script that is called when destroying the structure with <a href="#sk_struct_destroy">sk_struct_destroy</a>.</td>
				</tr>
			</table>
			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>This script can be used to define your own structure types for use with the runtime. These types will then be used as pseudo <i>class</i> templates when creating child structures.</p>
			<p>For more information, see the <a href="#ref_structs">Structure Types</a> section of the reference.</p>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
enum vec2{
    X,Y,
    sizeof /* sizeof is used to allocate suitable space */
}
sk_struct_type_add("2Dvector",vec2.sizeof,-1,-1);
var my_vector = sk_struct_create("2Dvector","position");
my_vector[@ vec2.X] = x;
my_vector[@ vec2.Y] = y;</pre></div>
			<p>The example code will create a new structure type called "2Dvector". Afterwards, a new instance of "2Dvector" (called "position") is created and has its position changed.</p>
		</documentation>
		<documentation id="sk_struct_type_exists">
			<div class="title">sk_struct_type_exists</div>
			<div class="brief">Returns whether the supplied type exists.</div>
			<div class="subtitle">Syntax</div>
			<div class="code">var result = sk_struct_type_exists(type);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>type</td>
					<td>The name of the structure type.</td>
				</tr>
			</table>
			<div class="returns">Boolean (True/False)</div>
			<div class="subtitle">Description</div>
			<p>This script can be used to check whether a structure type exists before accessing it.</p>
			<p>For more information, see the <a href="#ref_structs">Structure Types</a> section of the reference.</p>
			<div class="subtitle">Example</div>
			<p><i>The following example assumes a structure type "2Dvector" exists prior.</i></p>
			<div class="code"><pre>
var my_vector = noone;
if(sk_struct_type_exists("2Dvector")){
    my_vector = sk_struct_create("2Dvector","position");
    my_vector[@ vec2.X] = x;
    my_vector[@ vec2.Y] = y;
}</pre></div>
			<p>The example code will check whether a structure type called "2Dvector" exists, and if it does, stores a new instance of that type in the variable "my_vector".</p>
		</documentation>
		<documentation id="sk_struct_create">
			<div class="title">sk_struct_create</div>
			<div class="brief">Creates a new structure instance and returns its reference.</div>
			<div class="subtitle">Syntax</div>
			<div class="code">var struct = sk_struct_create(type, name);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>type</td>
					<td>The name of the structure type.</td>
				</tr>
				<tr>
					<td>name</td>
					<td>The name of the structure <i>(this is used to identify the structure in the future)</i>.</td>
				</tr>
			</table>
			<div class="returns">struct (actually, its an array reference)</div>
			<div class="subtitle">Description</div>
			<p>This script is used to create a new instance of a supplied structure type.</p>
			<p>For more information, see the <a href="#ref_structs">Structure Types</a> section of the reference.</p>
			<div class="subtitle">Example</div>
			<p><i>The following example assumes a structure type "2Dvector" exists prior.</i></p>
			<div class="code"><pre>
var my_vector = noone;
if(sk_struct_type_exists("2Dvector")){
    my_vector = sk_struct_create("2Dvector","position");
    my_vector[@ vec2.X] = x;
    my_vector[@ vec2.Y] = y;
}</pre></div>
			<p>The example code will check whether a structure type called "2Dvector" exists, and if it does, stores a new instance of that type in the variable "my_vector".</p>
		</documentation>
		<documentation id="sk_struct_destroy">
			<div class="title">sk_struct_destroy</div>
			<div class="brief">Makes the supplied structure unidentifiable, and frees the nested data attributed to it.</div>
			<div class="subtitle">Syntax</div>
			<div class="code">sk_struct_destroy(struct);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>struct</td>
					<td>The reference to the structure instance you want to dispose.</td>
				</tr>
			</table>
			<div class="returns">N/A</div>
			<div class="subtitle">Description</div>
			<p>This script is used to call the destructor script on a specific structure instance; since [arrays] cannot be explicitly destroyed, you should always remove all previous references by setting your variable a value such as '0'.</p>
			<p>For more information, see the <a href="#ref_structs">Structure Types</a> section of the reference.</p>
			<div class="subtitle">Example</div>
			<p><i>The following example assumes a structure type "2Dvector" exists prior.</i></p>
			<div class="code"><pre>
var my_vector = sk_struct_create("2Dvector","position");
sk_struct_destroy(my_vector);
my_vector = 0;</pre></div>
			<p>The example code will create a new instance of "2Dvector". Afterwards, that same structure is promptly destroyed and its reference set to '0', so that its container can be garbage collected.</p>
		</documentation>
		<documentation id="sk_struct_exists">
			<div class="title">sk_struct_exists</div>
			<div class="brief">Returns whether the supplied structure instance exists.</div>
			<div class="subtitle">Syntax</div>
			<div class="code">var result = sk_struct_exists(struct, type);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>struct</td>
					<td>The reference to the structure instance.</td>
				</tr>
				<tr>
					<td>type</td>
					<td>The name of the structure type.</td>
				</tr>
			</table>
			<div class="returns">Boolean (True/False)</div>
			<div class="subtitle">Description</div>
			<p>This script is used to check whether the supplied structure exists before accessing it.</p>
			<p>For more information, see the <a href="#ref_structs">Structure Types</a> section of the reference.</p>
			<div class="subtitle">Example</div>
			<p><i>The following example assumes a structure type "2Dvector" exists prior.</i></p>
			<div class="code"><pre>
var is_a_vector = sk_struct_create("2Dvector","position");
var is_not_a_vector = noone;
show_message(sk_struct_exists(is_a_vector,"2Dvector"));
show_message(sk_struct_exists(is_not_a_vector,"2Dvector"));
</pre></div>
			<p>The example code will produce two message boxes; the first will output true (1), and the second will output false (0).</p>
		</documentation>
		<documentation id="sk_struct_get_type">
			<div class="title">sk_struct_get_type</div>
			<div class="brief">Returns the type of the structure instance.</div>
			<div class="subtitle">Syntax</div>
			<div class="code">var type = sk_struct_get_type(struct);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>struct</td>
					<td>The reference to the structure instance.</td>
				</tr>
			</table>
			<div class="returns">String</div>
			<div class="subtitle">Description</div>
			<p>This script is used to find the structure type of the supplied structure instance.</p>
			<p>For more information, see the <a href="#ref_structs">Structure Types</a> section of the reference.</p>
			<div class="subtitle">Example</div>
			<p><i>The following example assumes a structure instance "my_structure" exists prior.</i></p>
			<div class="code"><pre>
var my_name = sk_struct_get_name(my_structure);
var my_type = sk_struct_get_type(my_structure);</pre></div>
			<p>The example code will store the name and type, of the pre-defined structure (located in the variable "my_structure"), in corresponding variables.</p>
		</documentation>
		<documentation id="sk_struct_get_name">
			<div class="title">sk_struct_get_name</div>
			<div class="brief">Returns the name of the structure instance.</div>
			<div class="subtitle">Syntax</div>
			<div class="code">var name = sk_struct_get_name(struct);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>struct</td>
					<td>The reference to the structure instance.</td>
				</tr>
			</table>
			<div class="returns">String</div>
			<div class="subtitle">Description</div>
			<p>This script is used to find the name of the supplied structure instance.</p>
			<p>For more information, see the <a href="#ref_structs">Structure Types</a> section of the reference.</p>
			<div class="subtitle">Example</div>
			<p><i>The following example assumes a structure instance "my_structure" exists prior.</i></p>
			<div class="code"><pre>
var my_name = sk_struct_get_name(my_structure);
var my_type = sk_struct_get_type(my_structure);</pre></div>
			<p>The example code will store the name and type, of the pre-defined structure (located in the variable "my_structure"), in corresponding variables.</p>
		</documentation>
		
		<documentation id="sk_bone_create">
			<div class="title">sk_bone_create</div>
			<div class="brief">Creates a new bone structure and returns its reference.</div>
			<div class="subtitle">Syntax</div>
			<div class="code">var bone = sk_bone_create(name);</div>
			<table>
				<tr>
					<th>Argument</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>name</td>
					<td>The name of the structure.</td>
				</tr>
			</table>
			<div class="returns">Bone</div>
			<div class="subtitle">Description</div>
			<p>This script can be used to create a new bone at runtime; these can be added to an armature using <a href="#sk_armature_add_bone">sk_armature_add_bone</a>.</p>
			<p>This script also comes packaged with a selection of constants used for accessing and manipulating bone data:</p>
			<table>
				<tr>
					<th>Constant(s) / SK_BONE.[...]</th>
					<th>Description</th>
				</tr>
				<tr>
					<td>X, Y</td>
					<td>The setup pose X and Y displacements of the bone.</td>
				</tr>
				<tr>
					<td>XScale, YScale</td>
					<td>The setup pose X and Y scales of the bone.</td>
				</tr>
				<tr>
					<td>XShear, YShear</td>
					<td>The setup pose X and Y shears of the bone.</td>
				</tr>
				<tr>
					<td>rotation</td>
					<td>The setup pose rotation of the bone.</td>
				</tr>
				<tr>
					<td>XApplied, YApplied</td>
					<td>The applied pose X and Y displacements of the bone.</td>
				</tr>
				<tr>
					<td>XScaleApplied, YScaleApplied</td>
					<td>The applied pose X and Y scales of the bone.</td>
				</tr>
				<tr>
					<td>XShearApplied, YShearApplied</td>
					<td>The applied pose X and Y shears of the bone.</td>
				</tr>
				<tr>
					<td>rotationApplied</td>
					<td>The applied pose rotation of the bone.</td>
				</tr>
				<tr>
					<td>XWorld, YWorld</td>
					<td>The world displacement of the bone.</td>
				</tr>
				<tr>
					<td>m00, m01, m10, m11</td>
					<td>The world 2x2 rotation matrix of the bone.</td>
				</tr>
				<tr>
					<td>badApplied</td>
					<td>A flag that represents whether the current applied pose is valid for the current world transform.</td>
				</tr>
				<tr>
					<td>transformMode</td>
					<td>The transformMode of the bone (see <a href="#sk_bone_set_transformMode">sk_bone_set_transformMode</a>).</td>
				</tr>
				<tr>
					<td>length</td>
					<td>The length of the bone (this is used for IK and other constraints).</td>
				</tr>
				<tr>
					<td>parent</td>
					<td>A reference to the bone's parent bone.</td>
				</tr>
				<tr>
					<td>sizeof</td>
					<td>The size of the bone structure.</td>
				</tr>
			</table>
			<div class="subtitle">Example</div>
			<div class="code"><pre>
var my_bone = bone_create("b_arm");
var bone_world_x = my_bone[SK_BONE.XWorld];
var bone_world_y = my_bone[SK_BONE.YWorld];</pre></div>
			<p>The example code create a new bone called "b_arm", and store it in the variable "my_bone". Afterwards, it's world position is obtained and stored in corresponding variables.</p>
		</documentation>
		
		
		
		<br/><br/>
	</body>
</html>